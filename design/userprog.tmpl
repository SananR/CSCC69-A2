             +--------------------------+
             | CSCC69                   |
             | PROJECT 2: USER PROGRAMS	|
             | DESIGN DOCUMENT          |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Sanan Rao sanan.rao@mail.utoronto.ca

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

No new data structures.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

I split the file_name using strtok_r and pass them to the setup_stack function.
setup_stack keeps a counter to the current "offset" on the stack and pushes
the arguments and other data in the correct order, while incrementing the
counter. This counter effectively represents the number of bytes pushed
to the stack, so we can ensure before every push that this is less than
4kb, otherwise return failure. 

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

Because strtok_r() is a "reentrant" version of strtok and thus it is
thread safe, which is of course essential in Pintos. 

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

* The unix approach allows for more customization/extensibility since
different shell programs can provide different ways of parsing, as well
as other features. This gives a better seperation of concern / responsibility,
since the parsing of arguments isn't really the job of the OS/kernel, and
can then be freely modified with changing the kernel. 

* A simpler kernel is less prone to bugs and vulnerabilities. By limiting
the kernel's role in command parsing, the risk of security issues related
to command interpretation is minimized. This separation also makes it easier
to isolate and address security vulnerabilities in user components
(like the shell) without impacting the kernel's stability.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Status of a process loading a user program */
enum userprog_loading_status
{
   LOADING,
   LOAD_SUCCESS,
   LOAD_FAILED
};

/* State information regarding a process's open file */
struct process_file
{
    int fd;
    struct file *file;
    struct list_elem elem;
};


/* State information regarding a child thread/process */
struct child_process
{
    tid_t tid;                                 
    struct thread *parent;                     
    struct list_elem elem;                     
    bool waited_on;                            
    bool exited;                              
    int exit_status;                           
    struct semaphore waiting_sema;             
    struct semaphore loading_sema;             
    enum userprog_loading_status load_status;
};

* Added some fields to thread struct to handle open files,
and child processes.

struct thread
{
    ...

    struct list child_list;                    

#ifdef USERPROG
    ...
    struct list open_files;                    
    struct child_process *cp;                  
    int fd_inc;                             
#endif

};

* The maximum number of arguments allowed for a system call
#define USER_PROCESS_MAXIMUM_ARGUMENTS 5

/* Lock used when interacting with the file system */
static struct lock file_lock;
/* Used for initializing the lock, for some reason trying to do this in a "cleaner" way led to many issues */
static bool file_lock_initialized = false;

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

Every call to the open system call creates a new file descriptor for a
file. File descriptors are unique within a single process, but not 
across the entire OS. 

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

I made use of the get_user() function to do all validation, and
properly handled page faults. I also validate user strings/buffers
which have a variable size by simply validating each byte until
reaching the null terminator. The system call number is also
validated by reading the first 4 bytes on the stack. When any
of these validations fail, a page fault occurs and the process
is terminated with a -1 status code. 

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

* For a system call that copies an entire page, the least number of
inspections is 1, this is when the data is aligned and fits entirely
into a single page (contigiuous). The greatest number of inspections
is 2 in the case that the data spills over into another page. For a
system call that only copies 2 bytes, the least and worst case are
exactly the same. TODO

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

I used the get_user() strategy and modified the page fault exception 
code to correctly handle page faults in the kernel. This means that
I only check that each address passed from the user as an argument
does not point to a space in kernel memory, and then dereference
the pointer and check for a segfault using get_user(). In the case
that the pointer is invalid, a page fault occurs which sets eax to
0xffffffff and copies its former value into eip. 

To ensure that the locks held by the process are correctly released
a list of all held locks is maintained by threads, and upon the 
process exiting they are all released iteratively. The page and all
allocated memory is also freed by the kernel since the process exits
"normally" (with code -1). 

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

In order to ensure proper synchronization, a semaphore is used. The 
parent thread downs the semaphore if the status of the child is still
"loading", and upon loading completion the child ups this semaphore.
By nature of semaphores the order here is irrelevant. Afterwards,
we check the state of the child process and on success return its tid,
otherwise -1.

To ensure that the state of the child is still available, in the case 
of it having exited and freed it's memory, this state is stored in a 
seperate struct "child_process". Each thread, maintains a list of all it's
child processes, which allows us to easily find the state of the child
even if it has exited, and properly clean up the memory when appropriate. 

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

I found that modifying the page fault code and using the get_user
function was actually easier as it led to more modular error 
handling code. Furthermore, I wanted to get extra practice with
page faults in preparation for the next assignment.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

* The main advantage is that the ownership of file descriptors is
extremely clear since it is local, furthermore the simple mapping
allows easy storing of the file descriptors. The main disadvantage
is that there is a lot of memory and initialization overhead since
each process maintains it's own list of open file descriptors. 
Another disadvantage is that the list of open file descriptors for 
a process is stored on that process's page, which has limited size.
This could be problematic for user programs that need to deal with
a large number of files. 

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

I used the default identity mapping.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
